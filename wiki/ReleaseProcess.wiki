#summary Our formal release process (release branches, etc)
#labels Phase-Implementation

= Release processes =

== Trunk (major release) ==

The following steps should be followed for releasing a new major version.

  # Create a new *branch* with the version number (e.g. release-1.3.4). For major releases (e.g. 1.3.4 -> 1.4.0), branch from trunk, and for minor releases (e.g. 1.4.0 -> 1.4.1), branch from the last release tag.
  # Inform the [http://groups.google.com/group/synergy-plus-dev synergy-plus-dev mailing list] that a new release branch is active.
  # For each *new* issue that must be fixed in the release version, first fix it in the *release branch*, and then merge it into the trunk (this way, if we mess up the merge, the trunk is harmed, not the stable release).
  # Ensure that there are no unfinished features in the release branch. The objective here is ensure that the release version is stable for end users.
  # Tag the branch; `svn move` from to the `branches` directory to the `tags` directory.
  # Create the installers for all platforms (see below for list), and upload to the downloads page.
  # Send a message to [http://groups.google.com/group/synergy-plus synergy-plus mailing list] announcing the new release, and update the version number in the IRC channel topic.
  # Decide what issues will be fixed for the next version, and ensure that they have the the correct milestone label.

== Fixing bugs ==

Simply put, from now on we will fix bugs in the release branch, then merge the changes into the trunk. This is so that any mistakes made during the merge only affect the trunk code. This is new approach will replace the previous "back port" approach. [http://www.javaworld.com/javaworld/jw-01-2008/jw-01-svnmerging.html Merging and branching in Subversion 1.5].

http://www.javaworld.com/javaworld/jw-01-2008/images/svn1.jpg

How to merge a bug fix into the trunk:
{{{
cd trunk
svn up
svn merge -r581:582 https://synergy-plus.googlecode.com/svn/branches/release-1.4.1
svn ci -m "Merge 1.4.1 r581:582 into trunk"
}}}
In the above example, r582 was the bug fix I had made in the release branch (581 was the previous release, which is not particularly relevant), and release-1.4.1 was the release branch in which I made the fix. The merge command will merge into the current directory if no target is specified.

== Installers/packages ==

|| *Filename* || *Description* ||
|| synergy-plus-x.x.x-Source.tar.gz || x.x.x Source Code ||
|| synergy-plus-x.x.x-Windows-x86.exe || x.x.x 32-bit Windows Installer ||
|| synergy-plus-x.x.x-Windows-x64.exe || x.x.x 64-bit Windows Installer ||
|| synergy-plus-x.x.x-Linux-x86_64.rpm || x.x.x 64-bit Linux RPM Package ||
|| synergy-plus-x.x.x-Linux-x86_64.deb || x.x.x 64-bit Linux Debian Package ||
|| synergy-plus-x.x.x-Linux-i686.rpm || x.x.x 32-bit Linux RPM Package ||
|| synergy-plus-x.x.x-Linux-i686.deb || x.x.x 32-bit Linux Debian Package ||
|| synergy-plus-x.x.x-MacOSX.dmg || x.x.x 32-bit Universal Mac OS X Package ||

== SVN commands ==

Creating a release branch:
{{{
svn cp https://synergy-plus.googlecode.com/svn/trunk/ https://synergy-plus.googlecode.com/svn/branches/release-x.x.x 
}}}

Tagging the release branch:
{{{
svn mv https://synergy-plus.googlecode.com/svn/branches/release-x.x.x https://synergy-plus.googlecode.com/svn/tags/release-x.x.x
}}}

== Branch, tag, huh? ==

Branches are for code that is in active development, and tags are *read only snapshots* of code that we have released in the past. This is usually considered the de-facto approach for releasing open source software. We tag releases so that in future, we can easily re-visit code from a specific version. This is useful for fixing a bug in (or back-porting a bug fix to) a specific version. Why not just tell the user to upgrade to the latest version? This isn't always an option for some users, as major versions often break compatibility (e.g. with configurations, network communication, etc).