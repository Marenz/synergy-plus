#summary How to configure and compile using CMake and the `hm` script
#labels Phase-Implementation,Featured

<wiki:toc max_depth="1" />

= Important! =

The source code for [http://code.google.com/p/synergy-plus/downloads/detail?name=synergy-plus-1.3.4.tar.gz version 1.3.4] will *not* work with this tutorial! You need to download the source code via the [SourceCode repository] or download [http://code.google.com/p/synergy-plus/downloads/detail?name=synergy-plus-1.3.5-rc-Source.tar.gz version 1.3.5] directly.

This guide is for Synergy+ version 1.3.5 and above. For compiling instructions for version 1.3.4 and below, please refer to the [CompilingAutomake old compile guide].

= Quickstart =

If you're too busy to read this page, and you have all the [#Dependencies dependencies], just run the `build` command using `hm`, from the project directory.

If either Visual Studio or Xcode is used, this will still generate the projects in the ./bin/ dir (which can be opened and used for compiling). The developer has the option of either compiling from the command line, or compiling via the IDE.

== Windows ==
{{{
hm build
}}}

== Unix, Linux, Mac OS X ==
{{{
./hm.sh build
}}}

----

= Introduction =

Since version 1.3.5 we use CMake to configure our build environment. Automake will no longer be used, which means, the traditional GNU style `./configure; make` command sequence is no longer available.

CMake is *not* a _replacement_ for `make` or Visual Studio; it doesn't compile source code, but it does generate project files (like Makefile, Visual Studio, and Xcode), which are then used to compile the code.

*Attention!* Please check the [#Dependencies dependencies] list at the bottom of the page, before continuing  with this guide.

= About `hm` =

Our `hm` script helps to make developer tasks easier. The `hm` script prompts you (on first run) to make a choice rather than assuming the tool you want to use.

To make sure everything is set up right, try running the `hm` script without any arguments:

|| *Windows* || `hm` ||
|| *Linux* || `./hm.sh` ||
|| *Mac OS X* || `./hm.sh` ||

If you get the usage/help screen, then you're good to go! If not, make sure you have Python installed correctly. (If you want to try without using python you can take a look at [http://twigstechtips.blogspot.com/2010/03/synergy-how-to-compile-source.html this blog post])

*Attention!* From now on, this guide will refer to `./hm.sh` as `hm`, to save space. This can however be shortened using `alias`. Linux and Mac OS X users can use `alias hm='./hm.sh'` but other BSD Unix users may need to use `alias hm ./hm.sh` instead.

= Configuring =

Experienced CMake users can skip this step and use CMake in the normal way, since the CMake scripts are not dependent on `hm`. Otherwise, read on...

First run this command:
{{{
hm configure
}}}

*Tip:* You can also use the short-hand: `hm conf`

The first time you run this, you will be prompted to choose a CMake generator (the recommend option is always number 1), which tells CMake what sort of project files to generate. Choose your favourite build tool by typing a number and pressing `enter`.

To run the setup again, use this command:
{{{
hm setup
}}}

= Compiling =

This requires the use of your chosen build system.

== Unix Makefiles ==

{{{
cd bin
make
}}}

== Visual Studio ==

  # Open the `bin` directory.
  # Double click: `synergy-plus.sln`
  # Click `Build` from the menu, then click `Build Solution`.

== Xcode ==

Note: Synergy+ currently must be built as 32-bit on OS X.

  # Open the `bin` directory.
  # Double click: `synergy-plus.xcodeproj`
  # Click `Build` from the menu, then click `Build`.

*Tip:* To build for a different version of OS X than the one you are on, go to Project, Edit Project Settings, Build.  There you can change settings for Intel/PPC, 32/64-bit, and OS X version (scroll down for OS X version).  Release builds should be 32-bit Universal, with base SDK 10.5.

== Tips and Tricks ==

*Tip:* There's also a `hm build` command (that can be shortened to `hm b`), which will compile the project from the command line for certain projects.

Windows users can download a free version of [http://www.microsoft.com/express/vc/ Visual C++ Express 2008], which can open the Visual Studio 2008 files generated by CMake. Other supported project types are [http://www.codeblocks.org/ Code::Blocks], [http://www.eclipse.org/cdt/ Eclipse CDT], and [http://www.mingw.org/ MinGW].

For Mac OS X users, although [http://developer.apple.com/technology/xcode.html Xcode] isn't necessary for compiling on Mac OS X (you can just use Unix Makefiles), it is a neat IDE and very widely used (and it's free). There others, such as [http://www.codeblocks.org/ Code::Blocks] and [http://www.eclipse.org/cdt/ Eclipse CDT] which (apparently) work on Mac OS X.

The reason why the `bin` directory is used, is so that CMake generated files do not contaminate the original source tree; this is known as an [http://www.cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees out-of-source build tree].

----

= Dependencies =

== Windows (x86) ==

  * Windows XP, Vista or 7
  * VC++ 6.0 and above (e.g. [http://www.microsoft.com/express/vc/ Visual C++ Express 2008])
  * CMake ([http://www.cmake.org/cmake/resources/software.html downloads])
  * Python ([http://www.python.org/download/ downloads])

You may need to add your Python install directory to the end of your PATH environment variable (System > Advanced System Settings > Environment Variables) so that `hm` can be called from the command prompt.

== Windows (x64) ==

  * All dependencies required for Windows x86
  * Visual Studio 2008 (x64) *SP1* or Visual Studio 2005 (x64) *SP1*
  * 64-bit compiler extensions installed (you _may_ need to re-run Visual Studio setup)

== Mac OS X 10.5.x ==

  * [http://developer.apple.com/technology/xcode.html XCode] or GCC 2.95 (and up)
  * Carbon headers and libraries

If you already have [http://www.macports.org/install.php MacPorts], run:
{{{
sudo port install cmake python
}}}

Otherwise, visit the [http://www.cmake.org/cmake/resources/software.html CMake] and [http://www.python.org/download/ Python] download pages.

== Ubuntu 9.04 ==

{{{
sudo apt-get install cmake make g++ xorg-dev
}}}

*Note:* In some cases, `libXtst-dev` may need to be manually installed. However, since it's a dependency of `xorg-dev`, this shouldn't be the case.

== Fedora 10 ==
{{{
sudo yum install cmake python gcc-c++ make libX11-devel libXtst-devel libXext-devel libXinerama-devel
}}}

*Note:* In some cases, `libXinerama-devel` need not be manually installed (since it's not required for minimum build), but this depends on whether the Xinerama headers have been installed previously (which in some cases they have).

== OpenSUSE 11.1 ==
{{{
su
yast2 -i cmake python gcc-c++ xorg-x11-devel
}}}

== Gentoo ==
{{{
su
emerge -av synergy-plus
}}}

== Mandriva One 2009 ==
{{{
su
urpmi cmake python gcc-c++ make xorg-x11-dev
}}}

== !OpenSolaris 2009.06 ==
{{{
su
pkg install SUNWPython SUNWcmake SUNWgcc SUNWxorg-headers SUNWxwinc
}}}

== Unix or other Linux ==
  * CMake
  * Python
  * GNU Make
  * GCC (2.95 and up)
  * !X11R4 and up (headers and libraries)
  * Xtst (e.g. libXtst-devel)